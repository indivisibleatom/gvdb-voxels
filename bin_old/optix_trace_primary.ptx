//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	_Z13trace_primaryv
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 8 .b8 cam_pos[12];
.global .align 4 .b8 cam_U[12];
.global .align 4 .b8 cam_V[12];
.global .align 4 .b8 cam_W[12];
.global .align 8 .b8 bad_color[12];
.global .align 4 .f32 scene_epsilon;
.global .align 4 .u32 sample;
.global .align 1 .b8 output_buffer[1];
.global .align 8 .b8 top_object[4];
.global .align 1 .b8 rnd_seeds[1];
.global .align 8 .b8 launch_index[8];
.global .align 8 .b8 launch_dim[8];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7cam_posE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5cam_UE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5cam_VE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5cam_WE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9bad_colorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13scene_epsilonE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6sampleE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10launch_dimE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename7cam_posE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5cam_UE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5cam_VE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5cam_WE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9bad_colorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13scene_epsilonE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename6sampleE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10launch_dimE[6] = {117, 105, 110, 116, 50, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7cam_posE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5cam_UE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5cam_VE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5cam_WE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9bad_colorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13scene_epsilonE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6sampleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10launch_dimE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic7cam_posE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5cam_UE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5cam_VE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5cam_WE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9bad_colorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13scene_epsilonE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic6sampleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic10launch_dimE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation7cam_posE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5cam_UE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5cam_VE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5cam_WE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9bad_colorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13scene_epsilonE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6sampleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10launch_dimE[1];
.global .align 1 .b8 $str[40] = {69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 48, 120, 37, 88, 32, 97, 116, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 40, 37, 100, 44, 37, 100, 41, 10, 0};

.visible .entry _Z13trace_primaryv(

)
{
	.local .align 8 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<116>;
	.reg .b32 	%r<67>;
	.reg .b64 	%rd<53>;


	mov.u64 	%rd52, __local_depot0;
	cvta.local.u64 	%SP, %rd52;
	add.u64 	%rd4, %SP, 0;
	cvta.to.local.u64 	%rd5, %rd4;
	ld.global.v2.u32 	{%r1, %r2}, [launch_index];
	cvt.rn.f32.u32	%f5, %r1;
	cvt.rn.f32.u32	%f6, %r2;
	ld.global.v2.u32 	{%r5, %r6}, [launch_dim];
	cvt.rn.f32.u32	%f7, %r5;
	cvt.rn.f32.u32	%f8, %r6;
	div.approx.ftz.f32 	%f9, %f5, %f7;
	div.approx.ftz.f32 	%f10, %f6, %f8;
	add.ftz.f32 	%f11, %f9, 0fBF000000;
	add.ftz.f32 	%f12, %f10, 0fBF000000;
	ld.global.f32 	%f13, [cam_U];
	ld.global.f32 	%f14, [cam_U+4];
	mul.ftz.f32 	%f15, %f14, %f14;
	fma.rn.ftz.f32 	%f16, %f13, %f13, %f15;
	ld.global.f32 	%f17, [cam_U+8];
	fma.rn.ftz.f32 	%f18, %f17, %f17, %f16;
	sqrt.approx.ftz.f32 	%f19, %f18;
	div.approx.ftz.f32 	%f1, %f19, %f7;
	add.s64 	%rd1, %rd5, 12;
	mov.u32 	%r9, 0;
	st.local.u32 	[%rd5+12], %r9;
	st.local.u32 	[%rd5+20], %r9;
	st.local.u32 	[%rd5+24], %r9;
	ld.global.u32 	%r10, [sample];
	setp.lt.u32	%p1, %r10, 2;
	ld.global.f32 	%f20, [cam_V];
	mul.ftz.f32 	%f21, %f12, %f20;
	ld.global.f32 	%f22, [cam_V+4];
	mul.ftz.f32 	%f23, %f12, %f22;
	ld.global.f32 	%f24, [cam_V+8];
	mul.ftz.f32 	%f25, %f12, %f24;
	fma.rn.ftz.f32 	%f26, %f11, %f13, %f21;
	fma.rn.ftz.f32 	%f27, %f11, %f14, %f23;
	fma.rn.ftz.f32 	%f28, %f11, %f17, %f25;
	ld.global.f32 	%f29, [cam_W];
	add.ftz.f32 	%f2, %f26, %f29;
	ld.global.f32 	%f30, [cam_W+4];
	add.ftz.f32 	%f3, %f27, %f30;
	ld.global.f32 	%f31, [cam_W+8];
	add.ftz.f32 	%f4, %f28, %f31;
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	cvt.u64.u32	%rd2, %r11;
	cvt.u64.u32	%rd3, %r12;
	@%p1 bra 	BB0_2;
	bra.uni 	BB0_1;

BB0_2:
	add.u64 	%rd42, %SP, 32;
	cvta.to.local.u64 	%rd43, %rd42;
	mov.u64 	%rd44, rnd_seeds;
	cvta.global.u64 	%rd30, %rd44;
	mov.u32 	%r44, 2;
	mov.u32 	%r45, 4;
	mov.u64 	%rd40, 0;
	// inline asm
	call (%rd29), _rt_buffer_get_64, (%rd30, %r44, %r45, %rd2, %rd3, %rd40, %rd40);
	// inline asm
	ld.u32 	%r49, [%rd29];
	st.local.u32 	[%rd43], %r49;
	ld.local.u32 	%r50, [%rd43];
	mad.lo.s32 	%r51, %r50, 1664525, 1013904223;
	and.b32  	%r52, %r51, 16777215;
	cvt.rn.f32.u32	%f84, %r52;
	mov.f32 	%f85, 0f4B800000;
	div.approx.ftz.f32 	%f86, %f84, %f85;
	add.ftz.f32 	%f87, %f86, 0fBF000000;
	mad.lo.s32 	%r53, %r51, 1664525, 1013904223;
	and.b32  	%r54, %r53, 16777215;
	cvt.rn.f32.u32	%f88, %r54;
	div.approx.ftz.f32 	%f89, %f88, %f85;
	add.ftz.f32 	%f90, %f89, 0fBF000000;
	mad.lo.s32 	%r55, %r53, 1664525, 1013904223;
	and.b32  	%r56, %r55, 16777215;
	cvt.rn.f32.u32	%f91, %r56;
	div.approx.ftz.f32 	%f92, %f91, %f85;
	add.ftz.f32 	%f93, %f92, 0fBF000000;
	ld.global.v2.u32 	{%r57, %r58}, [launch_index];
	cvt.u64.u32	%rd37, %r57;
	cvt.u64.u32	%rd38, %r58;
	// inline asm
	call (%rd35), _rt_buffer_get_64, (%rd30, %r44, %r45, %rd37, %rd38, %rd40, %rd40);
	// inline asm
	st.u32 	[%rd35], %r55;
	fma.rn.ftz.f32 	%f94, %f1, %f87, %f2;
	fma.rn.ftz.f32 	%f95, %f1, %f90, %f3;
	fma.rn.ftz.f32 	%f96, %f1, %f93, %f4;
	mul.ftz.f32 	%f97, %f95, %f95;
	fma.rn.ftz.f32 	%f98, %f94, %f94, %f97;
	fma.rn.ftz.f32 	%f99, %f96, %f96, %f98;
	rsqrt.approx.ftz.f32 	%f100, %f99;
	mul.ftz.f32 	%f79, %f94, %f100;
	mul.ftz.f32 	%f80, %f95, %f100;
	mul.ftz.f32 	%f81, %f96, %f100;
	ld.global.v2.f32 	{%f101, %f102}, [cam_pos];
	ld.global.f32 	%f78, [cam_pos+8];
	ld.global.u32 	%r46, [top_object];
	mov.f32 	%f82, 0f00000000;
	mov.f32 	%f83, 0f6C4ECB8F;
	mov.u32 	%r48, 28;
	// inline asm
	call _rt_trace_64, (%r46, %f101, %f102, %f78, %f79, %f80, %f81, %r9, %f82, %f83, %rd4, %r48);
	// inline asm
	ld.local.v2.f32 	{%f103, %f104}, [%rd1+-12];
	ld.local.f32 	%f107, [%rd1+-4];
	add.ftz.f32 	%f108, %f107, 0f00000000;
	add.ftz.f32 	%f109, %f104, 0f00000000;
	add.ftz.f32 	%f110, %f103, 0f00000000;
	st.local.v2.f32 	[%rd1+-12], {%f110, %f109};
	st.local.f32 	[%rd1+-4], %f108;
	bra.uni 	BB0_3;

BB0_1:
	add.u64 	%rd25, %SP, 28;
	cvta.to.local.u64 	%rd26, %rd25;
	mov.u64 	%rd27, rnd_seeds;
	cvta.global.u64 	%rd7, %rd27;
	mov.u32 	%r22, 2;
	mov.u32 	%r18, 4;
	mov.u64 	%rd24, 0;
	// inline asm
	call (%rd6), _rt_buffer_get_64, (%rd7, %r22, %r18, %rd2, %rd3, %rd24, %rd24);
	// inline asm
	ld.u32 	%r24, [%rd6];
	st.local.u32 	[%rd26], %r24;
	ld.local.u32 	%r25, [%rd26];
	mad.lo.s32 	%r26, %r25, 1664525, 1013904223;
	and.b32  	%r27, %r26, 16777215;
	cvt.rn.f32.u32	%f40, %r27;
	mov.f32 	%f41, 0f4B800000;
	div.approx.ftz.f32 	%f42, %f40, %f41;
	add.ftz.f32 	%f43, %f42, 0fBF000000;
	mad.lo.s32 	%r28, %r26, 1664525, 1013904223;
	and.b32  	%r29, %r28, 16777215;
	cvt.rn.f32.u32	%f44, %r29;
	div.approx.ftz.f32 	%f45, %f44, %f41;
	add.ftz.f32 	%f46, %f45, 0fBF000000;
	mad.lo.s32 	%r30, %r28, 1664525, 1013904223;
	and.b32  	%r31, %r30, 16777215;
	cvt.rn.f32.u32	%f47, %r31;
	div.approx.ftz.f32 	%f48, %f47, %f41;
	add.ftz.f32 	%f49, %f48, 0fBF000000;
	ld.global.v2.u32 	{%r32, %r33}, [launch_index];
	cvt.u64.u32	%rd14, %r32;
	cvt.u64.u32	%rd15, %r33;
	// inline asm
	call (%rd12), _rt_buffer_get_64, (%rd7, %r22, %r18, %rd14, %rd15, %rd24, %rd24);
	// inline asm
	st.u32 	[%rd12], %r30;
	fma.rn.ftz.f32 	%f50, %f1, %f43, %f2;
	fma.rn.ftz.f32 	%f51, %f1, %f46, %f3;
	fma.rn.ftz.f32 	%f52, %f1, %f49, %f4;
	mul.ftz.f32 	%f53, %f51, %f51;
	fma.rn.ftz.f32 	%f54, %f50, %f50, %f53;
	fma.rn.ftz.f32 	%f55, %f52, %f52, %f54;
	rsqrt.approx.ftz.f32 	%f56, %f55;
	mul.ftz.f32 	%f35, %f50, %f56;
	mul.ftz.f32 	%f36, %f51, %f56;
	mul.ftz.f32 	%f37, %f52, %f56;
	ld.global.v2.f32 	{%f57, %f58}, [cam_pos];
	ld.global.f32 	%f34, [cam_pos+8];
	ld.global.u32 	%r19, [top_object];
	mov.f32 	%f38, 0f00000000;
	mov.f32 	%f39, 0f6C4ECB8F;
	mov.u32 	%r21, 28;
	// inline asm
	call _rt_trace_64, (%r19, %f57, %f58, %f34, %f35, %f36, %f37, %r9, %f38, %f39, %rd4, %r21);
	// inline asm
	ld.global.v2.u32 	{%r36, %r37}, [launch_index];
	cvt.u64.u32	%rd21, %r36;
	cvt.u64.u32	%rd22, %r37;
	mov.u64 	%rd28, output_buffer;
	cvta.global.u64 	%rd20, %rd28;
	mov.u32 	%r23, 12;
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd20, %r22, %r23, %rd21, %rd22, %rd24, %rd24);
	// inline asm
	ld.global.u32 	%r40, [sample];
	add.s32 	%r41, %r40, -1;
	cvt.rn.f32.u32	%f59, %r41;
	ld.f32 	%f60, [%rd19];
	ld.f32 	%f61, [%rd19+4];
	ld.f32 	%f62, [%rd19+8];
	ld.local.v2.f32 	{%f63, %f64}, [%rd1+-12];
	fma.rn.ftz.f32 	%f66, %f60, %f59, %f63;
	fma.rn.ftz.f32 	%f68, %f61, %f59, %f64;
	ld.local.f32 	%f69, [%rd1+-4];
	fma.rn.ftz.f32 	%f70, %f59, %f62, %f69;
	cvt.rn.f32.u32	%f71, %r40;
	rcp.approx.ftz.f32 	%f72, %f71;
	mul.ftz.f32 	%f73, %f70, %f72;
	mul.ftz.f32 	%f74, %f68, %f72;
	mul.ftz.f32 	%f75, %f66, %f72;
	st.local.v2.f32 	[%rd1+-12], {%f75, %f74};
	st.local.f32 	[%rd1+-4], %f73;

BB0_3:
	ld.global.v2.u32 	{%r63, %r64}, [launch_index];
	cvt.u64.u32	%rd47, %r63;
	cvt.u64.u32	%rd48, %r64;
	mov.u64 	%rd51, output_buffer;
	cvta.global.u64 	%rd46, %rd51;
	mov.u32 	%r61, 2;
	mov.u32 	%r62, 12;
	mov.u64 	%rd50, 0;
	// inline asm
	call (%rd45), _rt_buffer_get_64, (%rd46, %r61, %r62, %rd47, %rd48, %rd50, %rd50);
	// inline asm
	ld.local.v2.f32 	{%f111, %f112}, [%rd1+-12];
	ld.local.f32 	%f115, [%rd1+-4];
	st.f32 	[%rd45+8], %f115;
	st.f32 	[%rd45+4], %f112;
	st.f32 	[%rd45], %f111;
	ret;
}

	// .globl	_Z9exceptionv
.visible .entry _Z9exceptionv(

)
{
	.local .align 8 .b8 	__local_depot1[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<13>;


	mov.u64 	%rd12, __local_depot1;
	cvta.local.u64 	%SP, %rd12;
	// inline asm
	call (%r1), _rt_get_exception_code, ();
	// inline asm
	ld.global.v2.u32 	{%r4, %r5}, [launch_index];
	add.u64 	%rd7, %SP, 0;
	cvta.to.local.u64 	%rd8, %rd7;
	st.local.u32 	[%rd8], %r1;
	st.local.u32 	[%rd8+4], %r4;
	st.local.u32 	[%rd8+8], %r5;
	mov.u64 	%rd9, $str;
	cvta.global.u64 	%rd10, %rd9;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r8, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.global.v2.u32 	{%r9, %r10}, [launch_index];
	cvt.u64.u32	%rd3, %r9;
	cvt.u64.u32	%rd4, %r10;
	mov.u64 	%rd11, output_buffer;
	cvta.global.u64 	%rd2, %rd11;
	mov.u32 	%r2, 2;
	mov.u32 	%r3, 12;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r2, %r3, %rd3, %rd4, %rd6, %rd6);
	// inline asm
	ld.global.v2.f32 	{%f1, %f2}, [bad_color];
	ld.global.f32 	%f5, [bad_color+8];
	st.f32 	[%rd1+8], %f5;
	st.f32 	[%rd1+4], %f2;
	st.f32 	[%rd1], %f1;
	ret;
}


